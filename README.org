* Lintcode 解题思路记录
#+BEGIN_QUOTE
*Table of Contents*
- [[#convert-sorted-list-to-binary-search-tree][Convert Sorted List to Binary Search Tree]]
- [[#remove-duplicates-from-sorted-list-I][Remove Duplicates from Sorted List I]]
- [[#remove-duplicates-from-sorted-list-II][Remove Duplicates from Sorted List II]]
- [[#rotate-list][Rotate List]]
- [[#add-binary][Add Binary]]
- [[#add-two-numbers][Add Two Numbers]]
- [[#reverse-linked-list][Reverse Linked List]]
- [[#nth-to-last-node-in-list][Nth to Last Node in List]]
- [[#remove-linked-list-elements][Remove Linked List Elements]]
- [[#remove-nth-from-end-of-list][Remove Nth From End of List]]
- [[#intersection-linked-list][Intersection Linked List]]
- [[#merge-sort-of-linked-list][Merge Sort of Linked List]]
- [[#insertion-sort-of-linked-list][Insertion Sort of Linked List]]
- [[#merge-k-sorted-list][Merge k Sorted List]]
- [[#linked-list-cycle][Linked List Cycle]]
- [[#reverse-linked-list-II][Reverse Linked List II]]
- [[#reorder-list][Reorder List]]
#+END_QUOTE
** Convert Sorted List to Binary Search Tree
Given a singly linked list where elements are sorted in ascending order, 
convert it to a height balanced BST.

#+BEGIN_SRC Java
public static TreeNode sortedListToBST(ListNode head)
#+END_SRC

*思路* ：递归实现：
 
base case: List为空时，返回 =null= ，List仅有一个元素时，返回一个仅含该元
素的叶子节点；

recursion: 找到中间的Node，将其val作为BST根节点的val，将其左子树设置为在
其左子链表上递归调用此函数的结果，右子树设置为在其右子链表上递归调用此函数
的结果。最后返回这个根节点的引用。

*实现细节*

中间的Node指的是链表的第 =N/2 + 1= 个Node，即若有3个Node，指的是第二个，若
有4个Node，指的是第三个；

为将原链表从中间分为左右两部分，右部分即为中间Node的next指向的链表，而对
左部分，需要将中间Node的前一Node的next设置为null，以从中间断开，因此程序中
真正需要获取的是中间前一Node的reference，所以程序中以及下图中的middle也许
叫middlePre更合适。

#+CAPTION: middle的指向
#+NAME:   fig:FindMiddle
[[./image/SortedListToBST.png]]

很多链表题目的中间过程需要定位到链表的中间节点，注意不同题目具体的需求不同，
可能需要定位到中间的元素，也可能需要定位到中间元素的前一元素，而且对于中间
元素在奇偶长度下的定义也可能不同（尤其是偶数时），所以很多solution中虽都有
findMiddle这一helper function，但是具体细节可能有差异。

findMiddle这个函数的实现一般是通过fast和slow指针完成的，但是也可先统计一遍
链表的长度，再定位到长度的一半，两者的时间复杂度是相同的。

*参考解法*

上面的解法时间复杂度为 =O(nlgn)= ，参考答案给出了一种复杂度为 =O(n)= 的解法：
#+BEGIN_SRC Java
// method 2, O(n)
private static ListNode current;

private static int lengthOfList(ListNode head) {
    int cnt = 0;
    for (; head != null; head = head.next, cnt++) ;
    return cnt;
}

public static TreeNode sortedListToBST(ListNode head) {
    current = head;
    int length = lengthOfList(head);
    return sortedListToBSTHelper(length);
}

private static TreeNode sortedListToBSTHelper(int length) {
    if (length <= 0) return null;
    TreeNode left = sortedListToBSTHelper(length / 2);
    TreeNode root = new TreeNode(current.val);
    current = current.next;
    TreeNode right = sortedListToBSTHelper(length - length / 2 - 1);
    root.left = left;
    root.right = right;
    return root;
}
#+END_SRC

自己的解法是从根到叶的一种从上而下的解法，而这种解法是从下往上的解法，扫描
一遍原链表即可，要优于自己的解法。
** Remove Duplicates from Sorted List I
Given a sorted linked list, delete all duplicates such that each element 
appear only once.

#+BEGIN_SRC Java
public static ListNode deleteDuplicates(ListNode head)
#+END_SRC

*Example*

Given 1->1->2, return 1->2.

Given 1->1->2->3->3, return 1->2->3.

*思路*

#+CAPTION: Remove Duplicates Sorted List I
#+NAME:   fig:RemoveDuplicatesI
[[./image/DeleteDuplicatesI.png]]

p从左往右扫描链表，每次x从p的下一个Node开始扫描，碰到与p的val不同的Node就
停下来，此时再修改p的next，使得连续相同的元素仅保留一个。

** Remove Duplicates from Sorted List II
Given a sorted linked list, delete all nodes that have duplicate numbers, 
leaving only distinct numbers from the original list.

#+BEGIN_SRC Java
public static ListNode deleteDuplicates(ListNode head)
#+END_SRC

*Example*

Given 1->2->3->3->4->4->5, return 1->2->5.

Given 1->1->1->2->3, return 2->3.

*思路*

本题和上题不同之处在于要求删除有重复的Node，因此，外循环中的指针总是指向当
前处理节点的前驱，一旦后面的节点有重复，则将它们都跳过。所以也就需要在head
之前增加一个dummy节点。

#+CAPTION: Remove Duplicates Sorted List II
#+NAME:   fig:RemoveDuplicatesII
[[./image/DeleteDuplicatesII.png]]

=p= 指针在外循环扫描一遍链表， =x= 指针在内循环扫描 =p.next= 之后的节点，
直到找到和 =p.next= 的 =val= 不同的节点为止，并在此过程中标志 =p.next= 
是否为重复的 =Node= 。
** Rotate List

Given a list, rotate the list to the right by k places, where k is non-negative.

#+BEGIN_SRC Java
 public static ListNode rotateRight(ListNode head, int k)
#+END_SRC

*Example*

Given 1->2->3->4->5 and k = 2, return 4->5->1->2->3.

*思路*

注意这里 =k= 可以取任意非负整数，当 =k = length= 时，相当于转了一圈，因此，
实际移动的位数应为 =k % length= 。

#+CAPTION: Rotate List
#+NAME:   fig:RotateList
[[./image/rotateList.png]]

在统计链表长度的同时，将链表首尾相连，再定位到第 =length - k % length= 的
节点，其为rotate后链表的 =head= ，且需将链表从此处断开。

** Add Binary

Given two binary strings, return their sum (also a binary string).

#+BEGIN_SRC Java
public static String addBinary(String a, String b)
#+END_SRC

*Example*

a = 11, b = 1, Return 100

*思路*

- 从右往左依次计算，每一位的计算就是一个一位全加器

: sum = a ^ b ^ cin
: cout = a & b | b & cin | a & cin

- 用 =String= 的 =charAt= method取出每一字符，字符为其ASCII码，需减去 '0' 转化为数字进行运算
- 将不同位的运算结果拼接起来时，用 =String= 的 =+= 运算符实现较简便。

** Add Two Numbers

You have two numbers represented by a linked list, where each node contains
a single digit. The digits are stored in reverse order, such that the 1's
digit is at the head of the list. Write a function that adds the two numbers
and returns the sum as a linked list.

*Example*
Given 7->1->6 + 5->9->2. That is, 617 + 295. Return 2->1->9. That is 912.

Given 3->1->5 and 5->9->2, return 8->0->8.

*思路*

和上题类似，从低位开始加，将进位依次往高位传递，在每一位加的同时，构建结果
链表。

** Reverse Linked List

#+BEGIN_SRC Java
public static ListNode reverse(ListNode head)
#+END_SRC

*Challenge*

Reverse it in-place and in one-pass

*思路*

#+CAPTION: Rotate List
#+NAME:   fig:RotateList
[[./image/ReverseLinkedList.png]]

** Nth to Last Node in List

Find the nth to last element of a singly linked list.The minimum number
 of nodes in list is n.

#+BEGIN_SRC Java
public static ListNode nthToLast(ListNode head, int n)
#+END_SRC

*Example*

Given a List 3->2->1->5->null and n = 2, return node whose value is 1.

*思路*

快慢指针法， =fast= 指针比 =slow= 指针先走 =n= 步，当 =fast= 指针指向链表
尾时，慢指针的位置即为所找 Node 的位置。

其实快慢指针法和先统计一遍链表长度，再从头移动 =length - n= 的时间复杂度
是完全相同的。

** Remove Linked List Elements

Remove all elements from a linked list of integers that have value val.

#+BEGIN_SRC Java
public static ListNode removeElements(ListNode head, int val)
#+END_SRC

*Example*

Given 1->2->3->3->4->5->3, val = 3, you should return the list as 
1->2->4->5

*思路*

由于删除某个节点需要将其前驱的 =next= 域指向其后继，因此总要获得当前处理
节点前驱的reference。所以需要在 =head= 之前设置一个 =dummy= 节点。

** Remove Nth From End of List

Given a linked list, remove the nth node from the end of list and return 
its head. The minimum number of nodes in list is n.

*Example*

Given linked list: 1->2->3->4->5->null, and n = 2.

After removing the second node from the end, the linked list becomes 
1->2->3->5->null.

*Challenge*

=O(n)= time

*思路*

将前两题结合起来，用快慢指针定位到倒数第 =n= 个节点，正如上题所提到的，要
删除某个节点，总是要获得其前驱的reference，因此这里也需要添加一个 =dummy= 
节点。

** Intersection Linked Lists

Write a program to find the node at which the intersection of two singly 
linked lists begins.

*Example*

The following two linked lists:

 A:          a1 -> a2 -> c1 -> c2 -> c3

 B:          b1 → b2 → b3 -> c1 -> c2 -> c3
 
 begin to intersect at node c1.

 *Note*
 
 - If the two linked lists have no intersection at all, return null.

 - The linked lists must retain their original structure after the function returns.

 - You may assume there are no cycles anywhere in the entire linked structure.

 *Challenge*
 
 Your code should preferably run in =O(n)= time and use only =O(1)= memory.

*思路*

若两个链表相交了，则 *必定从某个节点一直到链表尾* 都是
重合的。因此，设其中较短的链表长度为 =lB= ，较长的链表长度为 =lA= ，
分别让一个指针从长链表的第 =lA - lB= 个元素，短链表的第0个元素同时开始
扫描，若发现重合的节点，则返回该节点。否则扫描到链表尾都未找到，则返回
 =null= 。

** Merge Sort of Linked List

*思路*

链表的merge sort思路和数组的merge sort类似，首先需要解决两个linked list的
merge问题，过程也和数组版本类似，两个指针分别指向两个链表，同时开始扫描，
扫描的过程中构建结果链表。这一过程的时间复杂度和数组相同，均为 =O(n)= ，即
Divide-and-Conquer的Combine过程复杂度为 =O(n)= ，且链表版本不需要extra
 memory。

主程序中需要完成的就是链表的平分，数组可以随机访问，因此数组版本的divide
过程复杂度为 =O(1)= ，而链表需要 =O(n)= 来定位到其中间位置，综上，链表
的merge sort复杂度也是 =O(nlgn)= 。

** Insertion Sort of Linked List
遍历一遍原链表，每次将当前元素插入结果链表中，结果链表一开始为空，每次插入
都保持其为有序的。

** Merge k Sorted List
*思路*

- 方法一

采用Divide-and-Conquer，从顶而下

#+CAPTION: Merge K Sorted List
#+NAME:   fig:MergeKSortedList
[[./image/mergeKSortedList.png]]

- 方法二

同样采用Divide-and-Conquer，只是从下而上

- 方法三

用Priority Queue，类似于find kth largest element in matrix这个问题，
先将第一列的所有元素加入pq中，再每次从中deleteMin，并将min对应行的
下一个元素再次加入pq，若没有下一元素了，就不加，直到pq为空为止
复杂度同样为O(knlgk)

** Linked List Cycle

Given a linked list, determine if it has a cycle in it.

*思路*

快慢指针法，块指针从head.next开始，慢指针从head开始，快指针每次移动两格，慢指针每次移动一格，
若两者能够相遇，则有环，否则，若在这个过程中检测到了链表尾，则无环。

** Reverse Linked List II
Reverse a linked list from position m to n.

- Example

Given 1->2->3->4->5->NULL, m = 2 and n = 4, return 1->4->3->2->5->NULL.

- Note

Given m, n satisfy the following condition: 1 ≤ m ≤ n ≤ length of list.

- Challenge

Reverse it in-place and in one-pass

- 思路

此题要求将指定范围内的节点逆置，将整个链表逆置的问题已解决，在这个基础上，
只需用原逆置的方法，将指定范围内的节点逆置，然后将结果和原链表的首尾分别
相连即可，因此，需要记录下3个量：

1) 指定范围的前驱
2) 逆置部分的链表尾，即为原指定范围内的首
3) 指定范围的后继

这三个量都可以在遍历链表的过程中记录下来。

#+CAPTION: Reverse Linked List II
#+NAME:   fig:ReverseLinkedListII
[[./image/reverseLinkedListII.png]]

** Reorder List
Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You must do this in-place without altering the nodes' values.

- Example
Given 1->2->3->4->null, reorder it to 1->4->2->3->null.

- 思路
和PalindromeLinkedList很类似，找到中间的点，将后半段List倒序，再将前半段和倒序后的后半段交叉拼接。

